{"ast":null,"code":"import _slicedToArray from \"C:\\\\proyectos\\\\cuponatic\\\\shopping-cart\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { getTotal } from '../reducers';\nimport { getProduct } from '../reducers/products';\nimport { connect } from 'react-redux';\nexport var addToLocalStorageCart = function addToLocalStorageCart(value) {\n  var existing = localStorage.getItem(\"cart3\"); // If no existing data, create an array\n  // Otherwise, convert the localStorage string to an array\n\n  existing = existing ? JSON.parse(existing) : {}; //console.log(existing);\n\n  var key = 300; // Add new data to localStorage Array\n\n  existing[value] = (existing[value] || 0) + 1; // Save back to localStorage\n\n  localStorage.setItem(\"cart3\", JSON.stringify(existing));\n  console.log(getLocalStorageCart());\n};\nexport var getLocalStorageCart = function getLocalStorageCart(_ref) {\n  var products = _ref.products;\n  var existing = localStorage.getItem(\"cart3\"); // If no existing data, create an array\n  // Otherwise, convert the localStorage string to an array\n\n  existing = existing ? JSON.parse(existing) : {};\n  console.log(products);\n  Object.entries(existing).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    console.log(key);\n    console.log(value);\n  });\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    products: getProduct(state.products),\n    total: getTotal(state)\n  };\n};\n\nexport default connect(mapStateToProps)(getLocalStorageCart);","map":{"version":3,"sources":["C:\\proyectos\\cuponatic\\shopping-cart\\src\\localStore\\index.js"],"names":["getTotal","getProduct","connect","addToLocalStorageCart","value","existing","localStorage","getItem","JSON","parse","key","setItem","stringify","console","log","getLocalStorageCart","products","Object","entries","map","mapStateToProps","state","total"],"mappings":";AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,IAAMC,qBAAqB,GAAI,SAAzBA,qBAAyB,CAACC,KAAD,EAAW;AAEhD,MAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAf,CAFgD,CAIhD;AACA;;AACAF,EAAAA,QAAQ,GAAGA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAH,GAA0B,EAA7C,CANgD,CAOhD;;AAEA,MAAIK,GAAG,GAAC,GAAR,CATgD,CAUhD;;AACAL,EAAAA,QAAQ,CAACD,KAAD,CAAR,GAAkB,CAACC,QAAQ,CAACD,KAAD,CAAR,IAAmB,CAApB,IAAyB,CAA3C,CAXgD,CAahD;;AACAE,EAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BH,IAAI,CAACI,SAAL,CAAeP,QAAf,CAA9B;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYC,mBAAmB,EAA/B;AAGA,CAlBM;AAoBP,OAAO,IAAMA,mBAAmB,GAAI,SAAvBA,mBAAuB,OAAgB;AAAA,MAAdC,QAAc,QAAdA,QAAc;AAEnD,MAAIX,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAf,CAFmD,CAInD;AACA;;AACAF,EAAAA,QAAQ,GAAGA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAH,GAA0B,EAA7C;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeb,QAAf,EAAyBc,GAAzB,CAA6B,iBAAkB;AAAA;AAAA,QAAhBT,GAAgB;AAAA,QAAXN,KAAW;;AACxCS,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AAEH,GAJJ;AAMA,CAfM;;AAiBP,IAAMgB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AACnCL,IAAAA,QAAQ,EAAEf,UAAU,CAACoB,KAAK,CAACL,QAAP,CADe;AAEnCM,IAAAA,KAAK,EAAEtB,QAAQ,CAACqB,KAAD;AAFoB,GAAZ;AAAA,CAAxB;;AAKE,eAAenB,OAAO,CACvBkB,eADuB,CAAP,CAEbL,mBAFa,CAAf","sourcesContent":["import { getTotal } from '../reducers'\r\nimport { getProduct } from '../reducers/products'\r\nimport { connect } from 'react-redux'\r\n\r\nexport const addToLocalStorageCart =  (value) => {\r\n\r\n\tvar existing = localStorage.getItem(\"cart3\");\r\n\r\n\t// If no existing data, create an array\r\n\t// Otherwise, convert the localStorage string to an array\r\n\texisting = existing ? JSON.parse(existing) : {};\r\n\t//console.log(existing);\r\n\r\n\tlet key=300;\r\n\t// Add new data to localStorage Array\r\n\texisting[value] = (existing[value] || 0) + 1;\r\n\r\n\t// Save back to localStorage\r\n\tlocalStorage.setItem(\"cart3\", JSON.stringify(existing));\r\n\tconsole.log(getLocalStorageCart());\r\n\t\r\n\r\n};\r\n\r\nexport const getLocalStorageCart =  ({products}) => {\r\n\r\n\tvar existing = localStorage.getItem(\"cart3\");\r\n\r\n\t// If no existing data, create an array\r\n\t// Otherwise, convert the localStorage string to an array\r\n\texisting = existing ? JSON.parse(existing) : {};\r\n\t\r\n\tconsole.log(products)\r\n\tObject.entries(existing).map(([key, value]) => {\r\n        console.log(key)\r\n        console.log(value)\r\n      \r\n    })\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tproducts: getProduct(state.products),\r\n\ttotal: getTotal(state)\r\n  })\r\n  \r\n  export default connect(\r\n\tmapStateToProps\r\n  )(getLocalStorageCart)\r\n  "]},"metadata":{},"sourceType":"module"}