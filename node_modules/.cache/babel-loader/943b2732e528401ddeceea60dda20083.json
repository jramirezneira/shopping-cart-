{"ast":null,"code":"import _objectSpread from \"C:\\\\proyectos\\\\cuponatic\\\\shopping-cart\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\proyectos\\\\cuponatic\\\\shopping-cart\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { combineReducers } from 'redux';\nimport cart, * as fromCart from './cart';\nimport products, * as fromProducts from './products';\nimport { getLocalStorageCart } from '../localStore';\nexport default combineReducers({\n  cart: cart,\n  products: products\n}); //const getAddedIds = state => fromCart.getAddedIds(state.cart)\n\nvar getQuantity = function getQuantity(state, id) {\n  return fromCart.getQuantity(state.cart, id);\n};\n\nvar getProduct = function getProduct(state, id) {\n  return fromProducts.getProduct(state.products, id);\n};\n\nexport var getTotal = function getTotal(state) {\n  var products = getCartProducts(state);\n  var total = 0;\n  getCartProducts(state).map(function (product) {\n    return product.valor_oferta !== undefined ? total = parseInt(total + product.valor_oferta.replace(\"$\", \"\").replace(\".\", \"\") * product.quantity) : 0;\n  });\n  return total;\n};\nexport var getCartProducts = function getCartProducts(state) {\n  return Object.entries(getLocalStorageCart()).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        id = _ref2[0],\n        cantidad = _ref2[1];\n\n    return _objectSpread({}, getProduct(state, id), {\n      quantity: cantidad //getQuantity(state, id)\n\n    });\n  });\n};","map":{"version":3,"sources":["C:\\proyectos\\cuponatic\\shopping-cart\\src\\reducers\\index.js"],"names":["combineReducers","cart","fromCart","products","fromProducts","getLocalStorageCart","getQuantity","state","id","getProduct","getTotal","getCartProducts","total","map","product","valor_oferta","undefined","parseInt","replace","quantity","Object","entries","cantidad"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,EAAa,KAAKC,QAAlB,MAAgC,QAAhC;AACA,OAAOC,QAAP,EAAiB,KAAKC,YAAtB,MAAwC,YAAxC;AACA,SAASC,mBAAT,QAAoC,eAApC;AAEA,eAAeL,eAAe,CAAC;AAC7BC,EAAAA,IAAI,EAAJA,IAD6B;AAE7BE,EAAAA,QAAQ,EAARA;AAF6B,CAAD,CAA9B,C,CAKA;;AACA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,EAAR;AAAA,SAAeN,QAAQ,CAACI,WAAT,CAAqBC,KAAK,CAACN,IAA3B,EAAiCO,EAAjC,CAAf;AAAA,CAApB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACF,KAAD,EAAQC,EAAR;AAAA,SAAeJ,YAAY,CAACK,UAAb,CAAwBF,KAAK,CAACJ,QAA9B,EAAwCK,EAAxC,CAAf;AAAA,CAAnB;;AAIE,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAAH,KAAK,EAC7B;AACE,MAAIJ,QAAQ,GAAGQ,eAAe,CAACJ,KAAD,CAA9B;AACA,MAAIK,KAAK,GAAC,CAAV;AACAD,EAAAA,eAAe,CAACJ,KAAD,CAAf,CAAuBM,GAAvB,CAA4B,UAAEC,OAAF;AAAA,WACxBA,OAAO,CAACC,YAAR,KAAyBC,SAAzB,GAAqCJ,KAAK,GAACK,QAAQ,CAACL,KAAK,GAAGE,OAAO,CAACC,YAAR,CAAqBG,OAArB,CAA6B,GAA7B,EAAiC,EAAjC,EAAqCA,OAArC,CAA6C,GAA7C,EAAiD,EAAjD,IAAuDJ,OAAO,CAACK,QAAxE,CAAnD,GAAsI,CAD9G;AAAA,GAA5B;AAGF,SAAOP,KAAP;AACD,CARQ;AAcT,OAAO,IAAMD,eAAe,GAAG,SAAlBA,eAAkB,CAAAJ,KAAK;AAAA,SAClCa,MAAM,CAACC,OAAP,CAAehB,mBAAmB,EAAlC,EAAsCQ,GAAtC,CAA0C;AAAA;AAAA,QAAEL,EAAF;AAAA,QAAMc,QAAN;;AAAA,6BAErCb,UAAU,CAACF,KAAD,EAAQC,EAAR,CAF2B;AAGxCW,MAAAA,QAAQ,EAAEG,QAH8B,CAGtB;;AAHsB;AAAA,GAA1C,CADkC;AAAA,CAA7B","sourcesContent":["import { combineReducers } from 'redux'\r\nimport cart, * as fromCart from './cart'\r\nimport products, * as fromProducts from './products'\r\nimport { getLocalStorageCart } from '../localStore'\r\n\r\nexport default combineReducers({\r\n  cart,\r\n  products\r\n})\r\n\r\n//const getAddedIds = state => fromCart.getAddedIds(state.cart)\r\nconst getQuantity = (state, id) => fromCart.getQuantity(state.cart, id)\r\nconst getProduct = (state, id) => fromProducts.getProduct(state.products, id)\r\n\r\n\r\n\r\n  export const getTotal = state => \r\n  {\r\n    let products = getCartProducts(state);\r\n    let total=0;\r\n    getCartProducts(state).map (( product) =>   \r\n        product.valor_oferta !== undefined ? total=parseInt(total + product.valor_oferta.replace(\"$\",\"\").replace(\".\",\"\") * product.quantity) :0   \r\n    )\r\n  return total\r\n}\r\n   \r\n  \r\n\r\n\r\n\r\nexport const getCartProducts = state =>(\r\n  Object.entries(getLocalStorageCart()).map(([id, cantidad]) => ({\r\n      \r\n    ...getProduct(state, id),\r\n    quantity: cantidad//getQuantity(state, id)\r\n  })));\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}