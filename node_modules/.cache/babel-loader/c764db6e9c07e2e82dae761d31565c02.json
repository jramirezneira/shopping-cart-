{"ast":null,"code":"import { getTotal } from '../reducers';\nimport { getProduct } from '../reducers/products';\nimport { connect } from 'react-redux';\nimport { ReactReduxContext } from 'react-redux';\nexport var addToLocalStorageCart = function addToLocalStorageCart(value) {\n  var existing = localStorage.getItem(\"cart3\"); // If no existing data, create an array\n  // Otherwise, convert the localStorage string to an array\n\n  existing = existing ? JSON.parse(existing) : {};\n  existing[value] = (existing[value] || 0) + 1; // Save back to localStorage\n\n  localStorage.setItem(\"cart3\", JSON.stringify(existing)); //\tconsole.log(getLocalStorageCart());\n};\nexport var getLocalStorageCart = function getLocalStorageCart() {\n  //console.log('papapapappapapa');\n  var id = localStorage.getItem(\"cart3\");\n  id = id ? JSON.parse(id) : {};\n  console.log(id);\n  return id;\n  /*console.log(f);\r\n  Object.entries(existing).map(([key, value]) => {\r\n         console.log(key)\r\n         console.log(value)\r\n       \r\n     })*/\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    products: getProduct(state.products),\n    total: getTotal(state)\n  };\n};\n\nexport default connect(mapStateToProps)(getLocalStorageCart);","map":{"version":3,"sources":["C:\\proyectos\\cuponatic\\shopping-cart\\src\\localStore\\index.js"],"names":["getTotal","getProduct","connect","ReactReduxContext","addToLocalStorageCart","value","existing","localStorage","getItem","JSON","parse","setItem","stringify","getLocalStorageCart","id","console","log","mapStateToProps","state","products","total"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,aAAlC;AAGA,OAAO,IAAMC,qBAAqB,GAAI,SAAzBA,qBAAyB,CAACC,KAAD,EAAW;AAEhD,MAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAf,CAFgD,CAIhD;AACA;;AACAF,EAAAA,QAAQ,GAAGA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAH,GAA0B,EAA7C;AAEAA,EAAAA,QAAQ,CAACD,KAAD,CAAR,GAAkB,CAACC,QAAQ,CAACD,KAAD,CAAR,IAAmB,CAApB,IAAyB,CAA3C,CARgD,CAUhD;;AACAE,EAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,SAAL,CAAeN,QAAf,CAA9B,EAXgD,CAYjD;AAGC,CAfM;AAiBP,OAAO,IAAMO,mBAAmB,GAAI,SAAvBA,mBAAuB,GAAM;AAEzC;AACA,MAAIC,EAAE,GAAGP,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAT;AACAM,EAAAA,EAAE,GAAGA,EAAE,GAAGL,IAAI,CAACC,KAAL,CAAWI,EAAX,CAAH,GAAoB,EAA3B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,SAAOA,EAAP;AAEA;;;;;;AAOA,CAfM;;AAiBP,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AACnCC,IAAAA,QAAQ,EAAElB,UAAU,CAACiB,KAAK,CAACC,QAAP,CADe;AAEnCC,IAAAA,KAAK,EAAEpB,QAAQ,CAACkB,KAAD;AAFoB,GAAZ;AAAA,CAAxB;;AAKE,eAAehB,OAAO,CACvBe,eADuB,CAAP,CAEbJ,mBAFa,CAAf","sourcesContent":["import { getTotal } from '../reducers'\r\nimport { getProduct } from '../reducers/products'\r\nimport { connect } from 'react-redux'\r\nimport { ReactReduxContext } from 'react-redux'\r\n\r\n\r\nexport const addToLocalStorageCart =  (value) => {\r\n\r\n\tvar existing = localStorage.getItem(\"cart3\");\r\n\r\n\t// If no existing data, create an array\r\n\t// Otherwise, convert the localStorage string to an array\r\n\texisting = existing ? JSON.parse(existing) : {};\r\n\r\n\texisting[value] = (existing[value] || 0) + 1;\r\n\r\n\t// Save back to localStorage\r\n\tlocalStorage.setItem(\"cart3\", JSON.stringify(existing));\r\n//\tconsole.log(getLocalStorageCart());\r\n\t\r\n\r\n};\r\n\r\nexport const getLocalStorageCart =  () => {\r\n\r\n\t//console.log('papapapappapapa');\r\n\tvar id = localStorage.getItem(\"cart3\");\r\n\tid = id ? JSON.parse(id) : {};\r\n\tconsole.log(id);\r\n\treturn id;\r\n\t\r\n\t/*console.log(f);\r\n\tObject.entries(existing).map(([key, value]) => {\r\n        console.log(key)\r\n        console.log(value)\r\n      \r\n    })*/\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tproducts: getProduct(state.products),\r\n\ttotal: getTotal(state)\r\n  })\r\n  \r\n  export default connect(\r\n\tmapStateToProps\r\n  )(getLocalStorageCart)\r\n  "]},"metadata":{},"sourceType":"module"}